import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { IVSRealTimeServiceException as __BaseException } from "./IVSRealTimeServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
  xAmznErrorType?: string | undefined;
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
  xAmznErrorType?: string | undefined;
  exceptionMessage?: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface Video {
  width?: number | undefined;
  height?: number | undefined;
  framerate?: number | undefined;
  bitrate?: number | undefined;
}
export interface CreateEncoderConfigurationRequest {
  name?: string | undefined;
  video?: Video | undefined;
  tags?: Record<string, string> | undefined;
}
export interface EncoderConfiguration {
  arn: string | undefined;
  name?: string | undefined;
  video?: Video | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreateEncoderConfigurationResponse {
  encoderConfiguration?: EncoderConfiguration | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
  xAmznErrorType?: string | undefined;
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class PendingVerification extends __BaseException {
  readonly name: "PendingVerification";
  readonly $fault: "client";
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
  xAmznErrorType?: string | undefined;
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<PendingVerification, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
  xAmznErrorType?: string | undefined;
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
  xAmznErrorType?: string | undefined;
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
  xAmznErrorType?: string | undefined;
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const IngestProtocol: {
  readonly RTMP: "RTMP";
  readonly RTMPS: "RTMPS";
};
export type IngestProtocol =
  (typeof IngestProtocol)[keyof typeof IngestProtocol];
export interface CreateIngestConfigurationRequest {
  name?: string | undefined;
  stageArn?: string | undefined;
  userId?: string | undefined;
  attributes?: Record<string, string> | undefined;
  ingestProtocol: IngestProtocol | undefined;
  insecureIngest?: boolean | undefined;
  tags?: Record<string, string> | undefined;
}
export declare const IngestConfigurationState: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type IngestConfigurationState =
  (typeof IngestConfigurationState)[keyof typeof IngestConfigurationState];
export interface IngestConfiguration {
  name?: string | undefined;
  arn: string | undefined;
  ingestProtocol: IngestProtocol | undefined;
  streamKey: string | undefined;
  stageArn: string | undefined;
  participantId: string | undefined;
  state: IngestConfigurationState | undefined;
  userId?: string | undefined;
  attributes?: Record<string, string> | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreateIngestConfigurationResponse {
  ingestConfiguration?: IngestConfiguration | undefined;
}
export declare const ParticipantTokenCapability: {
  readonly PUBLISH: "PUBLISH";
  readonly SUBSCRIBE: "SUBSCRIBE";
};
export type ParticipantTokenCapability =
  (typeof ParticipantTokenCapability)[keyof typeof ParticipantTokenCapability];
export interface CreateParticipantTokenRequest {
  stageArn: string | undefined;
  duration?: number | undefined;
  userId?: string | undefined;
  attributes?: Record<string, string> | undefined;
  capabilities?: ParticipantTokenCapability[] | undefined;
}
export interface ParticipantToken {
  participantId?: string | undefined;
  token?: string | undefined;
  userId?: string | undefined;
  attributes?: Record<string, string> | undefined;
  duration?: number | undefined;
  capabilities?: ParticipantTokenCapability[] | undefined;
  expirationTime?: Date | undefined;
}
export interface CreateParticipantTokenResponse {
  participantToken?: ParticipantToken | undefined;
}
export interface ParticipantRecordingHlsConfiguration {
  targetSegmentDurationSeconds?: number | undefined;
}
export declare const ParticipantRecordingMediaType: {
  readonly AUDIO_ONLY: "AUDIO_ONLY";
  readonly AUDIO_VIDEO: "AUDIO_VIDEO";
  readonly NONE: "NONE";
};
export type ParticipantRecordingMediaType =
  (typeof ParticipantRecordingMediaType)[keyof typeof ParticipantRecordingMediaType];
export declare const ThumbnailRecordingMode: {
  readonly DISABLED: "DISABLED";
  readonly INTERVAL: "INTERVAL";
};
export type ThumbnailRecordingMode =
  (typeof ThumbnailRecordingMode)[keyof typeof ThumbnailRecordingMode];
export declare const ThumbnailStorageType: {
  readonly LATEST: "LATEST";
  readonly SEQUENTIAL: "SEQUENTIAL";
};
export type ThumbnailStorageType =
  (typeof ThumbnailStorageType)[keyof typeof ThumbnailStorageType];
export interface ParticipantThumbnailConfiguration {
  targetIntervalSeconds?: number | undefined;
  storage?: ThumbnailStorageType[] | undefined;
  recordingMode?: ThumbnailRecordingMode | undefined;
}
export interface AutoParticipantRecordingConfiguration {
  storageConfigurationArn: string | undefined;
  mediaTypes?: ParticipantRecordingMediaType[] | undefined;
  thumbnailConfiguration?: ParticipantThumbnailConfiguration | undefined;
  recordingReconnectWindowSeconds?: number | undefined;
  hlsConfiguration?: ParticipantRecordingHlsConfiguration | undefined;
  recordParticipantReplicas?: boolean | undefined;
}
export interface ParticipantTokenConfiguration {
  duration?: number | undefined;
  userId?: string | undefined;
  attributes?: Record<string, string> | undefined;
  capabilities?: ParticipantTokenCapability[] | undefined;
}
export interface CreateStageRequest {
  name?: string | undefined;
  participantTokenConfigurations?: ParticipantTokenConfiguration[] | undefined;
  tags?: Record<string, string> | undefined;
  autoParticipantRecordingConfiguration?:
    | AutoParticipantRecordingConfiguration
    | undefined;
}
export interface StageEndpoints {
  events?: string | undefined;
  whip?: string | undefined;
  rtmp?: string | undefined;
  rtmps?: string | undefined;
}
export interface Stage {
  arn: string | undefined;
  name?: string | undefined;
  activeSessionId?: string | undefined;
  tags?: Record<string, string> | undefined;
  autoParticipantRecordingConfiguration?:
    | AutoParticipantRecordingConfiguration
    | undefined;
  endpoints?: StageEndpoints | undefined;
}
export interface CreateStageResponse {
  stage?: Stage | undefined;
  participantTokens?: ParticipantToken[] | undefined;
}
export interface S3StorageConfiguration {
  bucketName: string | undefined;
}
export interface CreateStorageConfigurationRequest {
  name?: string | undefined;
  s3: S3StorageConfiguration | undefined;
  tags?: Record<string, string> | undefined;
}
export interface StorageConfiguration {
  arn: string | undefined;
  name?: string | undefined;
  s3?: S3StorageConfiguration | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreateStorageConfigurationResponse {
  storageConfiguration?: StorageConfiguration | undefined;
}
export interface DeleteEncoderConfigurationRequest {
  arn: string | undefined;
}
export interface DeleteEncoderConfigurationResponse {}
export interface DeleteIngestConfigurationRequest {
  arn: string | undefined;
  force?: boolean | undefined;
}
export interface DeleteIngestConfigurationResponse {}
export interface DeletePublicKeyRequest {
  arn: string | undefined;
}
export interface DeletePublicKeyResponse {}
export interface DeleteStageRequest {
  arn: string | undefined;
}
export interface DeleteStageResponse {}
export interface DeleteStorageConfigurationRequest {
  arn: string | undefined;
}
export interface DeleteStorageConfigurationResponse {}
export interface DisconnectParticipantRequest {
  stageArn: string | undefined;
  participantId: string | undefined;
  reason?: string | undefined;
}
export interface DisconnectParticipantResponse {}
export interface GetCompositionRequest {
  arn: string | undefined;
}
export interface ChannelDestinationConfiguration {
  channelArn: string | undefined;
  encoderConfigurationArn?: string | undefined;
}
export declare const RecordingConfigurationFormat: {
  readonly HLS: "HLS";
};
export type RecordingConfigurationFormat =
  (typeof RecordingConfigurationFormat)[keyof typeof RecordingConfigurationFormat];
export interface CompositionRecordingHlsConfiguration {
  targetSegmentDurationSeconds?: number | undefined;
}
export interface RecordingConfiguration {
  hlsConfiguration?: CompositionRecordingHlsConfiguration | undefined;
  format?: RecordingConfigurationFormat | undefined;
}
export interface CompositionThumbnailConfiguration {
  targetIntervalSeconds?: number | undefined;
  storage?: ThumbnailStorageType[] | undefined;
}
export interface S3DestinationConfiguration {
  storageConfigurationArn: string | undefined;
  encoderConfigurationArns: string[] | undefined;
  recordingConfiguration?: RecordingConfiguration | undefined;
  thumbnailConfigurations?: CompositionThumbnailConfiguration[] | undefined;
}
export interface DestinationConfiguration {
  name?: string | undefined;
  channel?: ChannelDestinationConfiguration | undefined;
  s3?: S3DestinationConfiguration | undefined;
}
export interface S3Detail {
  recordingPrefix: string | undefined;
}
export interface DestinationDetail {
  s3?: S3Detail | undefined;
}
export declare const DestinationState: {
  readonly ACTIVE: "ACTIVE";
  readonly FAILED: "FAILED";
  readonly RECONNECTING: "RECONNECTING";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type DestinationState =
  (typeof DestinationState)[keyof typeof DestinationState];
export interface Destination {
  id: string | undefined;
  state: DestinationState | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  configuration: DestinationConfiguration | undefined;
  detail?: DestinationDetail | undefined;
}
export declare const VideoAspectRatio: {
  readonly AUTO: "AUTO";
  readonly PORTRAIT: "PORTRAIT";
  readonly SQUARE: "SQUARE";
  readonly VIDEO: "VIDEO";
};
export type VideoAspectRatio =
  (typeof VideoAspectRatio)[keyof typeof VideoAspectRatio];
export declare const VideoFillMode: {
  readonly CONTAIN: "CONTAIN";
  readonly COVER: "COVER";
  readonly FILL: "FILL";
};
export type VideoFillMode = (typeof VideoFillMode)[keyof typeof VideoFillMode];
export interface GridConfiguration {
  featuredParticipantAttribute?: string | undefined;
  omitStoppedVideo?: boolean | undefined;
  videoAspectRatio?: VideoAspectRatio | undefined;
  videoFillMode?: VideoFillMode | undefined;
  gridGap?: number | undefined;
}
export declare const PipBehavior: {
  readonly DYNAMIC: "DYNAMIC";
  readonly STATIC: "STATIC";
};
export type PipBehavior = (typeof PipBehavior)[keyof typeof PipBehavior];
export declare const PipPosition: {
  readonly BOTTOM_LEFT: "BOTTOM_LEFT";
  readonly BOTTOM_RIGHT: "BOTTOM_RIGHT";
  readonly TOP_LEFT: "TOP_LEFT";
  readonly TOP_RIGHT: "TOP_RIGHT";
};
export type PipPosition = (typeof PipPosition)[keyof typeof PipPosition];
export interface PipConfiguration {
  featuredParticipantAttribute?: string | undefined;
  omitStoppedVideo?: boolean | undefined;
  videoFillMode?: VideoFillMode | undefined;
  gridGap?: number | undefined;
  pipParticipantAttribute?: string | undefined;
  pipBehavior?: PipBehavior | undefined;
  pipOffset?: number | undefined;
  pipPosition?: PipPosition | undefined;
  pipWidth?: number | undefined;
  pipHeight?: number | undefined;
}
export interface LayoutConfiguration {
  grid?: GridConfiguration | undefined;
  pip?: PipConfiguration | undefined;
}
export declare const CompositionState: {
  readonly ACTIVE: "ACTIVE";
  readonly FAILED: "FAILED";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type CompositionState =
  (typeof CompositionState)[keyof typeof CompositionState];
export interface Composition {
  arn: string | undefined;
  stageArn: string | undefined;
  state: CompositionState | undefined;
  layout: LayoutConfiguration | undefined;
  destinations: Destination[] | undefined;
  tags?: Record<string, string> | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
}
export interface GetCompositionResponse {
  composition?: Composition | undefined;
}
export interface GetEncoderConfigurationRequest {
  arn: string | undefined;
}
export interface GetEncoderConfigurationResponse {
  encoderConfiguration?: EncoderConfiguration | undefined;
}
export interface GetIngestConfigurationRequest {
  arn: string | undefined;
}
export interface GetIngestConfigurationResponse {
  ingestConfiguration?: IngestConfiguration | undefined;
}
export interface GetParticipantRequest {
  stageArn: string | undefined;
  sessionId: string | undefined;
  participantId: string | undefined;
}
export declare const ParticipantProtocol: {
  readonly RTMP: "RTMP";
  readonly RTMPS: "RTMPS";
  readonly UNKNOWN: "UNKNOWN";
  readonly WHIP: "WHIP";
};
export type ParticipantProtocol =
  (typeof ParticipantProtocol)[keyof typeof ParticipantProtocol];
export declare const ParticipantRecordingState: {
  readonly ACTIVE: "ACTIVE";
  readonly DISABLED: "DISABLED";
  readonly FAILED: "FAILED";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type ParticipantRecordingState =
  (typeof ParticipantRecordingState)[keyof typeof ParticipantRecordingState];
export declare const ReplicationState: {
  readonly ACTIVE: "ACTIVE";
  readonly STOPPED: "STOPPED";
};
export type ReplicationState =
  (typeof ReplicationState)[keyof typeof ReplicationState];
export declare const ReplicationType: {
  readonly NONE: "NONE";
  readonly REPLICA: "REPLICA";
  readonly SOURCE: "SOURCE";
};
export type ReplicationType =
  (typeof ReplicationType)[keyof typeof ReplicationType];
export declare const ParticipantState: {
  readonly CONNECTED: "CONNECTED";
  readonly DISCONNECTED: "DISCONNECTED";
};
export type ParticipantState =
  (typeof ParticipantState)[keyof typeof ParticipantState];
export interface Participant {
  participantId?: string | undefined;
  userId?: string | undefined;
  state?: ParticipantState | undefined;
  firstJoinTime?: Date | undefined;
  attributes?: Record<string, string> | undefined;
  published?: boolean | undefined;
  ispName?: string | undefined;
  osName?: string | undefined;
  osVersion?: string | undefined;
  browserName?: string | undefined;
  browserVersion?: string | undefined;
  sdkVersion?: string | undefined;
  recordingS3BucketName?: string | undefined;
  recordingS3Prefix?: string | undefined;
  recordingState?: ParticipantRecordingState | undefined;
  protocol?: ParticipantProtocol | undefined;
  replicationType?: ReplicationType | undefined;
  replicationState?: ReplicationState | undefined;
  sourceStageArn?: string | undefined;
  sourceSessionId?: string | undefined;
}
export interface GetParticipantResponse {
  participant?: Participant | undefined;
}
export interface GetPublicKeyRequest {
  arn: string | undefined;
}
export interface PublicKey {
  arn?: string | undefined;
  name?: string | undefined;
  publicKeyMaterial?: string | undefined;
  fingerprint?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface GetPublicKeyResponse {
  publicKey?: PublicKey | undefined;
}
export interface GetStageRequest {
  arn: string | undefined;
}
export interface GetStageResponse {
  stage?: Stage | undefined;
}
export interface GetStageSessionRequest {
  stageArn: string | undefined;
  sessionId: string | undefined;
}
export interface StageSession {
  sessionId?: string | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
}
export interface GetStageSessionResponse {
  stageSession?: StageSession | undefined;
}
export interface GetStorageConfigurationRequest {
  arn: string | undefined;
}
export interface GetStorageConfigurationResponse {
  storageConfiguration?: StorageConfiguration | undefined;
}
export interface ImportPublicKeyRequest {
  publicKeyMaterial: string | undefined;
  name?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ImportPublicKeyResponse {
  publicKey?: PublicKey | undefined;
}
export interface ListCompositionsRequest {
  filterByStageArn?: string | undefined;
  filterByEncoderConfigurationArn?: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface DestinationSummary {
  id: string | undefined;
  state: DestinationState | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
}
export interface CompositionSummary {
  arn: string | undefined;
  stageArn: string | undefined;
  destinations: DestinationSummary[] | undefined;
  state: CompositionState | undefined;
  tags?: Record<string, string> | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
}
export interface ListCompositionsResponse {
  compositions: CompositionSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListEncoderConfigurationsRequest {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface EncoderConfigurationSummary {
  arn: string | undefined;
  name?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ListEncoderConfigurationsResponse {
  encoderConfigurations: EncoderConfigurationSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListIngestConfigurationsRequest {
  filterByStageArn?: string | undefined;
  filterByState?: IngestConfigurationState | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface IngestConfigurationSummary {
  name?: string | undefined;
  arn: string | undefined;
  ingestProtocol: IngestProtocol | undefined;
  stageArn: string | undefined;
  participantId: string | undefined;
  state: IngestConfigurationState | undefined;
  userId?: string | undefined;
}
export interface ListIngestConfigurationsResponse {
  ingestConfigurations: IngestConfigurationSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListParticipantEventsRequest {
  stageArn: string | undefined;
  sessionId: string | undefined;
  participantId: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export declare const EventErrorCode: {
  readonly BITRATE_EXCEEDED: "BITRATE_EXCEEDED";
  readonly B_FRAME_PRESENT: "B_FRAME_PRESENT";
  readonly INSUFFICIENT_CAPABILITIES: "INSUFFICIENT_CAPABILITIES";
  readonly INTERNAL_SERVER_EXCEPTION: "INTERNAL_SERVER_EXCEPTION";
  readonly INVALID_AUDIO_CODEC: "INVALID_AUDIO_CODEC";
  readonly INVALID_INPUT: "INVALID_INPUT";
  readonly INVALID_PROTOCOL: "INVALID_PROTOCOL";
  readonly INVALID_STREAM_KEY: "INVALID_STREAM_KEY";
  readonly INVALID_VIDEO_CODEC: "INVALID_VIDEO_CODEC";
  readonly PUBLISHER_NOT_FOUND: "PUBLISHER_NOT_FOUND";
  readonly QUOTA_EXCEEDED: "QUOTA_EXCEEDED";
  readonly RESOLUTION_EXCEEDED: "RESOLUTION_EXCEEDED";
  readonly REUSE_OF_STREAM_KEY: "REUSE_OF_STREAM_KEY";
  readonly STREAM_DURATION_EXCEEDED: "STREAM_DURATION_EXCEEDED";
};
export type EventErrorCode =
  (typeof EventErrorCode)[keyof typeof EventErrorCode];
export declare const EventName: {
  readonly JOINED: "JOINED";
  readonly JOIN_ERROR: "JOIN_ERROR";
  readonly LEFT: "LEFT";
  readonly PUBLISH_ERROR: "PUBLISH_ERROR";
  readonly PUBLISH_STARTED: "PUBLISH_STARTED";
  readonly PUBLISH_STOPPED: "PUBLISH_STOPPED";
  readonly REPLICATION_STARTED: "REPLICATION_STARTED";
  readonly REPLICATION_STOPPED: "REPLICATION_STOPPED";
  readonly SUBSCRIBE_ERROR: "SUBSCRIBE_ERROR";
  readonly SUBSCRIBE_STARTED: "SUBSCRIBE_STARTED";
  readonly SUBSCRIBE_STOPPED: "SUBSCRIBE_STOPPED";
};
export type EventName = (typeof EventName)[keyof typeof EventName];
export interface Event {
  name?: EventName | undefined;
  participantId?: string | undefined;
  eventTime?: Date | undefined;
  remoteParticipantId?: string | undefined;
  errorCode?: EventErrorCode | undefined;
  destinationStageArn?: string | undefined;
  destinationSessionId?: string | undefined;
  replica?: boolean | undefined;
}
export interface ListParticipantEventsResponse {
  events: Event[] | undefined;
  nextToken?: string | undefined;
}
export interface ListParticipantReplicasRequest {
  sourceStageArn: string | undefined;
  participantId: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ParticipantReplica {
  sourceStageArn: string | undefined;
  participantId: string | undefined;
  sourceSessionId: string | undefined;
  destinationStageArn: string | undefined;
  destinationSessionId: string | undefined;
  replicationState: ReplicationState | undefined;
}
export interface ListParticipantReplicasResponse {
  replicas: ParticipantReplica[] | undefined;
  nextToken?: string | undefined;
}
export declare const ParticipantRecordingFilterByRecordingState: {
  readonly ACTIVE: "ACTIVE";
  readonly FAILED: "FAILED";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type ParticipantRecordingFilterByRecordingState =
  (typeof ParticipantRecordingFilterByRecordingState)[keyof typeof ParticipantRecordingFilterByRecordingState];
export interface ListParticipantsRequest {
  stageArn: string | undefined;
  sessionId: string | undefined;
  filterByUserId?: string | undefined;
  filterByPublished?: boolean | undefined;
  filterByState?: ParticipantState | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
  filterByRecordingState?:
    | ParticipantRecordingFilterByRecordingState
    | undefined;
}
export interface ParticipantSummary {
  participantId?: string | undefined;
  userId?: string | undefined;
  state?: ParticipantState | undefined;
  firstJoinTime?: Date | undefined;
  published?: boolean | undefined;
  recordingState?: ParticipantRecordingState | undefined;
  replicationType?: ReplicationType | undefined;
  replicationState?: ReplicationState | undefined;
  sourceStageArn?: string | undefined;
  sourceSessionId?: string | undefined;
}
export interface ListParticipantsResponse {
  participants: ParticipantSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListPublicKeysRequest {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface PublicKeySummary {
  arn?: string | undefined;
  name?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ListPublicKeysResponse {
  publicKeys: PublicKeySummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListStagesRequest {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface StageSummary {
  arn: string | undefined;
  name?: string | undefined;
  activeSessionId?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ListStagesResponse {
  stages: StageSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListStageSessionsRequest {
  stageArn: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface StageSessionSummary {
  sessionId?: string | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
}
export interface ListStageSessionsResponse {
  stageSessions: StageSessionSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListStorageConfigurationsRequest {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface StorageConfigurationSummary {
  arn: string | undefined;
  name?: string | undefined;
  s3?: S3StorageConfiguration | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ListStorageConfigurationsResponse {
  storageConfigurations: StorageConfigurationSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags: Record<string, string> | undefined;
}
export interface StartCompositionRequest {
  stageArn: string | undefined;
  idempotencyToken?: string | undefined;
  layout?: LayoutConfiguration | undefined;
  destinations: DestinationConfiguration[] | undefined;
  tags?: Record<string, string> | undefined;
}
export interface StartCompositionResponse {
  composition?: Composition | undefined;
}
export interface StartParticipantReplicationRequest {
  sourceStageArn: string | undefined;
  destinationStageArn: string | undefined;
  participantId: string | undefined;
  reconnectWindowSeconds?: number | undefined;
  attributes?: Record<string, string> | undefined;
}
export interface StartParticipantReplicationResponse {
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
}
export interface StopCompositionRequest {
  arn: string | undefined;
}
export interface StopCompositionResponse {}
export interface StopParticipantReplicationRequest {
  sourceStageArn: string | undefined;
  destinationStageArn: string | undefined;
  participantId: string | undefined;
}
export interface StopParticipantReplicationResponse {
  accessControlAllowOrigin?: string | undefined;
  accessControlExposeHeaders?: string | undefined;
  cacheControl?: string | undefined;
  contentSecurityPolicy?: string | undefined;
  strictTransportSecurity?: string | undefined;
  xContentTypeOptions?: string | undefined;
  xFrameOptions?: string | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateIngestConfigurationRequest {
  arn: string | undefined;
  stageArn?: string | undefined;
}
export interface UpdateIngestConfigurationResponse {
  ingestConfiguration?: IngestConfiguration | undefined;
}
export interface UpdateStageRequest {
  arn: string | undefined;
  name?: string | undefined;
  autoParticipantRecordingConfiguration?:
    | AutoParticipantRecordingConfiguration
    | undefined;
}
export interface UpdateStageResponse {
  stage?: Stage | undefined;
}
export declare const IngestConfigurationFilterSensitiveLog: (
  obj: IngestConfiguration
) => any;
export declare const CreateIngestConfigurationResponseFilterSensitiveLog: (
  obj: CreateIngestConfigurationResponse
) => any;
export declare const ParticipantTokenFilterSensitiveLog: (
  obj: ParticipantToken
) => any;
export declare const CreateParticipantTokenResponseFilterSensitiveLog: (
  obj: CreateParticipantTokenResponse
) => any;
export declare const CreateStageResponseFilterSensitiveLog: (
  obj: CreateStageResponse
) => any;
export declare const GetIngestConfigurationResponseFilterSensitiveLog: (
  obj: GetIngestConfigurationResponse
) => any;
export declare const UpdateIngestConfigurationResponseFilterSensitiveLog: (
  obj: UpdateIngestConfigurationResponse
) => any;
