import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { IVSRealTimeServiceException as __BaseException } from "./IVSRealTimeServiceException";
export class AccessDeniedException extends __BaseException {
    name = "AccessDeniedException";
    $fault = "client";
    accessControlAllowOrigin;
    accessControlExposeHeaders;
    cacheControl;
    contentSecurityPolicy;
    strictTransportSecurity;
    xContentTypeOptions;
    xFrameOptions;
    xAmznErrorType;
    exceptionMessage;
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.accessControlAllowOrigin = opts.accessControlAllowOrigin;
        this.accessControlExposeHeaders = opts.accessControlExposeHeaders;
        this.cacheControl = opts.cacheControl;
        this.contentSecurityPolicy = opts.contentSecurityPolicy;
        this.strictTransportSecurity = opts.strictTransportSecurity;
        this.xContentTypeOptions = opts.xContentTypeOptions;
        this.xFrameOptions = opts.xFrameOptions;
        this.xAmznErrorType = opts.xAmznErrorType;
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    accessControlAllowOrigin;
    accessControlExposeHeaders;
    cacheControl;
    contentSecurityPolicy;
    strictTransportSecurity;
    xContentTypeOptions;
    xFrameOptions;
    xAmznErrorType;
    exceptionMessage;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.accessControlAllowOrigin = opts.accessControlAllowOrigin;
        this.accessControlExposeHeaders = opts.accessControlExposeHeaders;
        this.cacheControl = opts.cacheControl;
        this.contentSecurityPolicy = opts.contentSecurityPolicy;
        this.strictTransportSecurity = opts.strictTransportSecurity;
        this.xContentTypeOptions = opts.xContentTypeOptions;
        this.xFrameOptions = opts.xFrameOptions;
        this.xAmznErrorType = opts.xAmznErrorType;
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    accessControlAllowOrigin;
    accessControlExposeHeaders;
    cacheControl;
    contentSecurityPolicy;
    strictTransportSecurity;
    xContentTypeOptions;
    xFrameOptions;
    xAmznErrorType;
    exceptionMessage;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.accessControlAllowOrigin = opts.accessControlAllowOrigin;
        this.accessControlExposeHeaders = opts.accessControlExposeHeaders;
        this.cacheControl = opts.cacheControl;
        this.contentSecurityPolicy = opts.contentSecurityPolicy;
        this.strictTransportSecurity = opts.strictTransportSecurity;
        this.xContentTypeOptions = opts.xContentTypeOptions;
        this.xFrameOptions = opts.xFrameOptions;
        this.xAmznErrorType = opts.xAmznErrorType;
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class PendingVerification extends __BaseException {
    name = "PendingVerification";
    $fault = "client";
    accessControlAllowOrigin;
    accessControlExposeHeaders;
    cacheControl;
    contentSecurityPolicy;
    strictTransportSecurity;
    xContentTypeOptions;
    xFrameOptions;
    xAmznErrorType;
    exceptionMessage;
    constructor(opts) {
        super({
            name: "PendingVerification",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PendingVerification.prototype);
        this.accessControlAllowOrigin = opts.accessControlAllowOrigin;
        this.accessControlExposeHeaders = opts.accessControlExposeHeaders;
        this.cacheControl = opts.cacheControl;
        this.contentSecurityPolicy = opts.contentSecurityPolicy;
        this.strictTransportSecurity = opts.strictTransportSecurity;
        this.xContentTypeOptions = opts.xContentTypeOptions;
        this.xFrameOptions = opts.xFrameOptions;
        this.xAmznErrorType = opts.xAmznErrorType;
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    accessControlAllowOrigin;
    accessControlExposeHeaders;
    cacheControl;
    contentSecurityPolicy;
    strictTransportSecurity;
    xContentTypeOptions;
    xFrameOptions;
    xAmznErrorType;
    exceptionMessage;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.accessControlAllowOrigin = opts.accessControlAllowOrigin;
        this.accessControlExposeHeaders = opts.accessControlExposeHeaders;
        this.cacheControl = opts.cacheControl;
        this.contentSecurityPolicy = opts.contentSecurityPolicy;
        this.strictTransportSecurity = opts.strictTransportSecurity;
        this.xContentTypeOptions = opts.xContentTypeOptions;
        this.xFrameOptions = opts.xFrameOptions;
        this.xAmznErrorType = opts.xAmznErrorType;
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    accessControlAllowOrigin;
    accessControlExposeHeaders;
    cacheControl;
    contentSecurityPolicy;
    strictTransportSecurity;
    xContentTypeOptions;
    xFrameOptions;
    xAmznErrorType;
    exceptionMessage;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.accessControlAllowOrigin = opts.accessControlAllowOrigin;
        this.accessControlExposeHeaders = opts.accessControlExposeHeaders;
        this.cacheControl = opts.cacheControl;
        this.contentSecurityPolicy = opts.contentSecurityPolicy;
        this.strictTransportSecurity = opts.strictTransportSecurity;
        this.xContentTypeOptions = opts.xContentTypeOptions;
        this.xFrameOptions = opts.xFrameOptions;
        this.xAmznErrorType = opts.xAmznErrorType;
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export class ValidationException extends __BaseException {
    name = "ValidationException";
    $fault = "client";
    accessControlAllowOrigin;
    accessControlExposeHeaders;
    cacheControl;
    contentSecurityPolicy;
    strictTransportSecurity;
    xContentTypeOptions;
    xFrameOptions;
    xAmznErrorType;
    exceptionMessage;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.accessControlAllowOrigin = opts.accessControlAllowOrigin;
        this.accessControlExposeHeaders = opts.accessControlExposeHeaders;
        this.cacheControl = opts.cacheControl;
        this.contentSecurityPolicy = opts.contentSecurityPolicy;
        this.strictTransportSecurity = opts.strictTransportSecurity;
        this.xContentTypeOptions = opts.xContentTypeOptions;
        this.xFrameOptions = opts.xFrameOptions;
        this.xAmznErrorType = opts.xAmznErrorType;
        this.exceptionMessage = opts.exceptionMessage;
    }
}
export const IngestProtocol = {
    RTMP: "RTMP",
    RTMPS: "RTMPS",
};
export const IngestConfigurationState = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
export const ParticipantTokenCapability = {
    PUBLISH: "PUBLISH",
    SUBSCRIBE: "SUBSCRIBE",
};
export const ParticipantRecordingMediaType = {
    AUDIO_ONLY: "AUDIO_ONLY",
    AUDIO_VIDEO: "AUDIO_VIDEO",
    NONE: "NONE",
};
export const ThumbnailRecordingMode = {
    DISABLED: "DISABLED",
    INTERVAL: "INTERVAL",
};
export const ThumbnailStorageType = {
    LATEST: "LATEST",
    SEQUENTIAL: "SEQUENTIAL",
};
export const RecordingConfigurationFormat = {
    HLS: "HLS",
};
export const DestinationState = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    RECONNECTING: "RECONNECTING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const VideoAspectRatio = {
    AUTO: "AUTO",
    PORTRAIT: "PORTRAIT",
    SQUARE: "SQUARE",
    VIDEO: "VIDEO",
};
export const VideoFillMode = {
    CONTAIN: "CONTAIN",
    COVER: "COVER",
    FILL: "FILL",
};
export const PipBehavior = {
    DYNAMIC: "DYNAMIC",
    STATIC: "STATIC",
};
export const PipPosition = {
    BOTTOM_LEFT: "BOTTOM_LEFT",
    BOTTOM_RIGHT: "BOTTOM_RIGHT",
    TOP_LEFT: "TOP_LEFT",
    TOP_RIGHT: "TOP_RIGHT",
};
export const CompositionState = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const ParticipantProtocol = {
    RTMP: "RTMP",
    RTMPS: "RTMPS",
    UNKNOWN: "UNKNOWN",
    WHIP: "WHIP",
};
export const ParticipantRecordingState = {
    ACTIVE: "ACTIVE",
    DISABLED: "DISABLED",
    FAILED: "FAILED",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const ReplicationState = {
    ACTIVE: "ACTIVE",
    STOPPED: "STOPPED",
};
export const ReplicationType = {
    NONE: "NONE",
    REPLICA: "REPLICA",
    SOURCE: "SOURCE",
};
export const ParticipantState = {
    CONNECTED: "CONNECTED",
    DISCONNECTED: "DISCONNECTED",
};
export const EventErrorCode = {
    BITRATE_EXCEEDED: "BITRATE_EXCEEDED",
    B_FRAME_PRESENT: "B_FRAME_PRESENT",
    INSUFFICIENT_CAPABILITIES: "INSUFFICIENT_CAPABILITIES",
    INTERNAL_SERVER_EXCEPTION: "INTERNAL_SERVER_EXCEPTION",
    INVALID_AUDIO_CODEC: "INVALID_AUDIO_CODEC",
    INVALID_INPUT: "INVALID_INPUT",
    INVALID_PROTOCOL: "INVALID_PROTOCOL",
    INVALID_STREAM_KEY: "INVALID_STREAM_KEY",
    INVALID_VIDEO_CODEC: "INVALID_VIDEO_CODEC",
    PUBLISHER_NOT_FOUND: "PUBLISHER_NOT_FOUND",
    QUOTA_EXCEEDED: "QUOTA_EXCEEDED",
    RESOLUTION_EXCEEDED: "RESOLUTION_EXCEEDED",
    REUSE_OF_STREAM_KEY: "REUSE_OF_STREAM_KEY",
    STREAM_DURATION_EXCEEDED: "STREAM_DURATION_EXCEEDED",
};
export const EventName = {
    JOINED: "JOINED",
    JOIN_ERROR: "JOIN_ERROR",
    LEFT: "LEFT",
    PUBLISH_ERROR: "PUBLISH_ERROR",
    PUBLISH_STARTED: "PUBLISH_STARTED",
    PUBLISH_STOPPED: "PUBLISH_STOPPED",
    REPLICATION_STARTED: "REPLICATION_STARTED",
    REPLICATION_STOPPED: "REPLICATION_STOPPED",
    SUBSCRIBE_ERROR: "SUBSCRIBE_ERROR",
    SUBSCRIBE_STARTED: "SUBSCRIBE_STARTED",
    SUBSCRIBE_STOPPED: "SUBSCRIBE_STOPPED",
};
export const ParticipantRecordingFilterByRecordingState = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const IngestConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.streamKey && { streamKey: SENSITIVE_STRING }),
});
export const CreateIngestConfigurationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ingestConfiguration && {
        ingestConfiguration: IngestConfigurationFilterSensitiveLog(obj.ingestConfiguration),
    }),
});
export const ParticipantTokenFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.token && { token: SENSITIVE_STRING }),
});
export const CreateParticipantTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.participantToken && { participantToken: ParticipantTokenFilterSensitiveLog(obj.participantToken) }),
});
export const CreateStageResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.participantTokens && {
        participantTokens: obj.participantTokens.map((item) => ParticipantTokenFilterSensitiveLog(item)),
    }),
});
export const GetIngestConfigurationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ingestConfiguration && {
        ingestConfiguration: IngestConfigurationFilterSensitiveLog(obj.ingestConfiguration),
    }),
});
export const UpdateIngestConfigurationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ingestConfiguration && {
        ingestConfiguration: IngestConfigurationFilterSensitiveLog(obj.ingestConfiguration),
    }),
});
