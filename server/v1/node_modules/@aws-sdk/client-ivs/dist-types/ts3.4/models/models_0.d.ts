import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { IvsServiceException as __BaseException } from "./IvsServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface BatchGetChannelRequest {
  arns: string[] | undefined;
}
export declare const ContainerFormat: {
  readonly FragmentedMP4: "FRAGMENTED_MP4";
  readonly TS: "TS";
};
export type ContainerFormat =
  (typeof ContainerFormat)[keyof typeof ContainerFormat];
export declare const ChannelLatencyMode: {
  readonly LowLatency: "LOW";
  readonly NormalLatency: "NORMAL";
};
export type ChannelLatencyMode =
  (typeof ChannelLatencyMode)[keyof typeof ChannelLatencyMode];
export declare const MultitrackMaximumResolution: {
  readonly FULL_HD: "FULL_HD";
  readonly HD: "HD";
  readonly SD: "SD";
};
export type MultitrackMaximumResolution =
  (typeof MultitrackMaximumResolution)[keyof typeof MultitrackMaximumResolution];
export declare const MultitrackPolicy: {
  readonly ALLOW: "ALLOW";
  readonly REQUIRE: "REQUIRE";
};
export type MultitrackPolicy =
  (typeof MultitrackPolicy)[keyof typeof MultitrackPolicy];
export interface MultitrackInputConfiguration {
  enabled?: boolean | undefined;
  policy?: MultitrackPolicy | undefined;
  maximumResolution?: MultitrackMaximumResolution | undefined;
}
export declare const TranscodePreset: {
  readonly ConstrainedBandwidthTranscodePreset: "CONSTRAINED_BANDWIDTH_DELIVERY";
  readonly HigherBandwidthTranscodePreset: "HIGHER_BANDWIDTH_DELIVERY";
};
export type TranscodePreset =
  (typeof TranscodePreset)[keyof typeof TranscodePreset];
export interface Srt {
  endpoint?: string | undefined;
  passphrase?: string | undefined;
}
export declare const ChannelType: {
  readonly AdvancedHDChannelType: "ADVANCED_HD";
  readonly AdvancedSDChannelType: "ADVANCED_SD";
  readonly BasicChannelType: "BASIC";
  readonly StandardChannelType: "STANDARD";
};
export type ChannelType = (typeof ChannelType)[keyof typeof ChannelType];
export interface Channel {
  arn?: string | undefined;
  name?: string | undefined;
  latencyMode?: ChannelLatencyMode | undefined;
  type?: ChannelType | undefined;
  recordingConfigurationArn?: string | undefined;
  ingestEndpoint?: string | undefined;
  playbackUrl?: string | undefined;
  authorized?: boolean | undefined;
  tags?: Record<string, string> | undefined;
  insecureIngest?: boolean | undefined;
  preset?: TranscodePreset | undefined;
  srt?: Srt | undefined;
  playbackRestrictionPolicyArn?: string | undefined;
  multitrackInputConfiguration?: MultitrackInputConfiguration | undefined;
  containerFormat?: ContainerFormat | undefined;
}
export interface BatchError {
  arn?: string | undefined;
  code?: string | undefined;
  message?: string | undefined;
}
export interface BatchGetChannelResponse {
  channels?: Channel[] | undefined;
  errors?: BatchError[] | undefined;
}
export interface BatchGetStreamKeyRequest {
  arns: string[] | undefined;
}
export interface StreamKey {
  arn?: string | undefined;
  value?: string | undefined;
  channelArn?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface BatchGetStreamKeyResponse {
  streamKeys?: StreamKey[] | undefined;
  errors?: BatchError[] | undefined;
}
export interface BatchStartViewerSessionRevocationViewerSession {
  channelArn: string | undefined;
  viewerId: string | undefined;
  viewerSessionVersionsLessThanOrEqualTo?: number | undefined;
}
export interface BatchStartViewerSessionRevocationRequest {
  viewerSessions: BatchStartViewerSessionRevocationViewerSession[] | undefined;
}
export interface BatchStartViewerSessionRevocationError {
  channelArn: string | undefined;
  viewerId: string | undefined;
  code?: string | undefined;
  message?: string | undefined;
}
export interface BatchStartViewerSessionRevocationResponse {
  errors?: BatchStartViewerSessionRevocationError[] | undefined;
}
export declare class PendingVerification extends __BaseException {
  readonly name: "PendingVerification";
  readonly $fault: "client";
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<PendingVerification, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CreateChannelRequest {
  name?: string | undefined;
  latencyMode?: ChannelLatencyMode | undefined;
  type?: ChannelType | undefined;
  authorized?: boolean | undefined;
  recordingConfigurationArn?: string | undefined;
  tags?: Record<string, string> | undefined;
  insecureIngest?: boolean | undefined;
  preset?: TranscodePreset | undefined;
  playbackRestrictionPolicyArn?: string | undefined;
  multitrackInputConfiguration?: MultitrackInputConfiguration | undefined;
  containerFormat?: ContainerFormat | undefined;
}
export interface CreateChannelResponse {
  channel?: Channel | undefined;
  streamKey?: StreamKey | undefined;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface CreatePlaybackRestrictionPolicyRequest {
  allowedCountries?: string[] | undefined;
  allowedOrigins?: string[] | undefined;
  enableStrictOriginEnforcement?: boolean | undefined;
  name?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface PlaybackRestrictionPolicy {
  arn: string | undefined;
  allowedCountries: string[] | undefined;
  allowedOrigins: string[] | undefined;
  enableStrictOriginEnforcement?: boolean | undefined;
  name?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreatePlaybackRestrictionPolicyResponse {
  playbackRestrictionPolicy?: PlaybackRestrictionPolicy | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  exceptionMessage?: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface S3DestinationConfiguration {
  bucketName: string | undefined;
}
export interface DestinationConfiguration {
  s3?: S3DestinationConfiguration | undefined;
}
export declare const RenditionConfigurationRendition: {
  readonly FULL_HD: "FULL_HD";
  readonly HD: "HD";
  readonly LOWEST_RESOLUTION: "LOWEST_RESOLUTION";
  readonly SD: "SD";
};
export type RenditionConfigurationRendition =
  (typeof RenditionConfigurationRendition)[keyof typeof RenditionConfigurationRendition];
export declare const RenditionConfigurationRenditionSelection: {
  readonly ALL: "ALL";
  readonly CUSTOM: "CUSTOM";
  readonly NONE: "NONE";
};
export type RenditionConfigurationRenditionSelection =
  (typeof RenditionConfigurationRenditionSelection)[keyof typeof RenditionConfigurationRenditionSelection];
export interface RenditionConfiguration {
  renditionSelection?: RenditionConfigurationRenditionSelection | undefined;
  renditions?: RenditionConfigurationRendition[] | undefined;
}
export declare const RecordingMode: {
  readonly Disabled: "DISABLED";
  readonly Interval: "INTERVAL";
};
export type RecordingMode = (typeof RecordingMode)[keyof typeof RecordingMode];
export declare const ThumbnailConfigurationResolution: {
  readonly FULL_HD: "FULL_HD";
  readonly HD: "HD";
  readonly LOWEST_RESOLUTION: "LOWEST_RESOLUTION";
  readonly SD: "SD";
};
export type ThumbnailConfigurationResolution =
  (typeof ThumbnailConfigurationResolution)[keyof typeof ThumbnailConfigurationResolution];
export declare const ThumbnailConfigurationStorage: {
  readonly LATEST: "LATEST";
  readonly SEQUENTIAL: "SEQUENTIAL";
};
export type ThumbnailConfigurationStorage =
  (typeof ThumbnailConfigurationStorage)[keyof typeof ThumbnailConfigurationStorage];
export interface ThumbnailConfiguration {
  recordingMode?: RecordingMode | undefined;
  targetIntervalSeconds?: number | undefined;
  resolution?: ThumbnailConfigurationResolution | undefined;
  storage?: ThumbnailConfigurationStorage[] | undefined;
}
export interface CreateRecordingConfigurationRequest {
  name?: string | undefined;
  destinationConfiguration: DestinationConfiguration | undefined;
  tags?: Record<string, string> | undefined;
  thumbnailConfiguration?: ThumbnailConfiguration | undefined;
  recordingReconnectWindowSeconds?: number | undefined;
  renditionConfiguration?: RenditionConfiguration | undefined;
}
export declare const RecordingConfigurationState: {
  readonly Active: "ACTIVE";
  readonly CreateFailed: "CREATE_FAILED";
  readonly Creating: "CREATING";
};
export type RecordingConfigurationState =
  (typeof RecordingConfigurationState)[keyof typeof RecordingConfigurationState];
export interface RecordingConfiguration {
  arn: string | undefined;
  name?: string | undefined;
  destinationConfiguration: DestinationConfiguration | undefined;
  state: RecordingConfigurationState | undefined;
  tags?: Record<string, string> | undefined;
  thumbnailConfiguration?: ThumbnailConfiguration | undefined;
  recordingReconnectWindowSeconds?: number | undefined;
  renditionConfiguration?: RenditionConfiguration | undefined;
}
export interface CreateRecordingConfigurationResponse {
  recordingConfiguration?: RecordingConfiguration | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export interface CreateStreamKeyRequest {
  channelArn: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreateStreamKeyResponse {
  streamKey?: StreamKey | undefined;
}
export interface DeleteChannelRequest {
  arn: string | undefined;
}
export interface DeletePlaybackKeyPairRequest {
  arn: string | undefined;
}
export interface DeletePlaybackKeyPairResponse {}
export interface DeletePlaybackRestrictionPolicyRequest {
  arn: string | undefined;
}
export interface DeleteRecordingConfigurationRequest {
  arn: string | undefined;
}
export interface DeleteStreamKeyRequest {
  arn: string | undefined;
}
export interface GetChannelRequest {
  arn: string | undefined;
}
export interface GetChannelResponse {
  channel?: Channel | undefined;
}
export interface GetPlaybackKeyPairRequest {
  arn: string | undefined;
}
export interface PlaybackKeyPair {
  arn?: string | undefined;
  name?: string | undefined;
  fingerprint?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface GetPlaybackKeyPairResponse {
  keyPair?: PlaybackKeyPair | undefined;
}
export interface GetPlaybackRestrictionPolicyRequest {
  arn: string | undefined;
}
export interface GetPlaybackRestrictionPolicyResponse {
  playbackRestrictionPolicy?: PlaybackRestrictionPolicy | undefined;
}
export interface GetRecordingConfigurationRequest {
  arn: string | undefined;
}
export interface GetRecordingConfigurationResponse {
  recordingConfiguration?: RecordingConfiguration | undefined;
}
export declare class ChannelNotBroadcasting extends __BaseException {
  readonly name: "ChannelNotBroadcasting";
  readonly $fault: "client";
  exceptionMessage?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ChannelNotBroadcasting, __BaseException>
  );
}
export interface GetStreamRequest {
  channelArn: string | undefined;
}
export declare const StreamHealth: {
  readonly Starving: "STARVING";
  readonly StreamHealthy: "HEALTHY";
  readonly Unknown: "UNKNOWN";
};
export type StreamHealth = (typeof StreamHealth)[keyof typeof StreamHealth];
export declare const StreamState: {
  readonly StreamLive: "LIVE";
  readonly StreamOffline: "OFFLINE";
};
export type StreamState = (typeof StreamState)[keyof typeof StreamState];
export interface _Stream {
  channelArn?: string | undefined;
  streamId?: string | undefined;
  playbackUrl?: string | undefined;
  startTime?: Date | undefined;
  state?: StreamState | undefined;
  health?: StreamHealth | undefined;
  viewerCount?: number | undefined;
}
export interface GetStreamResponse {
  stream?: _Stream | undefined;
}
export interface GetStreamKeyRequest {
  arn: string | undefined;
}
export interface GetStreamKeyResponse {
  streamKey?: StreamKey | undefined;
}
export interface GetStreamSessionRequest {
  channelArn: string | undefined;
  streamId?: string | undefined;
}
export interface AudioConfiguration {
  codec?: string | undefined;
  targetBitrate?: number | undefined;
  sampleRate?: number | undefined;
  channels?: number | undefined;
  track?: string | undefined;
}
export interface VideoConfiguration {
  avcProfile?: string | undefined;
  avcLevel?: string | undefined;
  codec?: string | undefined;
  encoder?: string | undefined;
  targetBitrate?: number | undefined;
  targetFramerate?: number | undefined;
  videoHeight?: number | undefined;
  videoWidth?: number | undefined;
  level?: string | undefined;
  track?: string | undefined;
  profile?: string | undefined;
}
export interface IngestConfiguration {
  video?: VideoConfiguration | undefined;
  audio?: AudioConfiguration | undefined;
}
export interface IngestConfigurations {
  videoConfigurations: VideoConfiguration[] | undefined;
  audioConfigurations: AudioConfiguration[] | undefined;
}
export interface StreamEvent {
  name?: string | undefined;
  type?: string | undefined;
  eventTime?: Date | undefined;
  code?: string | undefined;
}
export interface StreamSession {
  streamId?: string | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  channel?: Channel | undefined;
  ingestConfiguration?: IngestConfiguration | undefined;
  ingestConfigurations?: IngestConfigurations | undefined;
  recordingConfiguration?: RecordingConfiguration | undefined;
  truncatedEvents?: StreamEvent[] | undefined;
}
export interface GetStreamSessionResponse {
  streamSession?: StreamSession | undefined;
}
export interface ImportPlaybackKeyPairRequest {
  publicKeyMaterial: string | undefined;
  name?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ImportPlaybackKeyPairResponse {
  keyPair?: PlaybackKeyPair | undefined;
}
export interface ListChannelsRequest {
  filterByName?: string | undefined;
  filterByRecordingConfigurationArn?: string | undefined;
  filterByPlaybackRestrictionPolicyArn?: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ChannelSummary {
  arn?: string | undefined;
  name?: string | undefined;
  latencyMode?: ChannelLatencyMode | undefined;
  authorized?: boolean | undefined;
  recordingConfigurationArn?: string | undefined;
  tags?: Record<string, string> | undefined;
  insecureIngest?: boolean | undefined;
  type?: ChannelType | undefined;
  preset?: TranscodePreset | undefined;
  playbackRestrictionPolicyArn?: string | undefined;
}
export interface ListChannelsResponse {
  channels: ChannelSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListPlaybackKeyPairsRequest {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface PlaybackKeyPairSummary {
  arn?: string | undefined;
  name?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ListPlaybackKeyPairsResponse {
  keyPairs: PlaybackKeyPairSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListPlaybackRestrictionPoliciesRequest {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface PlaybackRestrictionPolicySummary {
  arn: string | undefined;
  allowedCountries: string[] | undefined;
  allowedOrigins: string[] | undefined;
  enableStrictOriginEnforcement?: boolean | undefined;
  name?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ListPlaybackRestrictionPoliciesResponse {
  playbackRestrictionPolicies: PlaybackRestrictionPolicySummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListRecordingConfigurationsRequest {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface RecordingConfigurationSummary {
  arn: string | undefined;
  name?: string | undefined;
  destinationConfiguration: DestinationConfiguration | undefined;
  state: RecordingConfigurationState | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ListRecordingConfigurationsResponse {
  recordingConfigurations: RecordingConfigurationSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListStreamKeysRequest {
  channelArn: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface StreamKeySummary {
  arn?: string | undefined;
  channelArn?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface ListStreamKeysResponse {
  streamKeys: StreamKeySummary[] | undefined;
  nextToken?: string | undefined;
}
export interface StreamFilters {
  health?: StreamHealth | undefined;
}
export interface ListStreamsRequest {
  filterBy?: StreamFilters | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface StreamSummary {
  channelArn?: string | undefined;
  streamId?: string | undefined;
  state?: StreamState | undefined;
  health?: StreamHealth | undefined;
  viewerCount?: number | undefined;
  startTime?: Date | undefined;
}
export interface ListStreamsResponse {
  streams: StreamSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListStreamSessionsRequest {
  channelArn: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface StreamSessionSummary {
  streamId?: string | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  hasErrorEvent?: boolean | undefined;
}
export interface ListStreamSessionsResponse {
  streamSessions: StreamSessionSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags: Record<string, string> | undefined;
}
export interface PutMetadataRequest {
  channelArn: string | undefined;
  metadata: string | undefined;
}
export interface StartViewerSessionRevocationRequest {
  channelArn: string | undefined;
  viewerId: string | undefined;
  viewerSessionVersionsLessThanOrEqualTo?: number | undefined;
}
export interface StartViewerSessionRevocationResponse {}
export interface StopStreamRequest {
  channelArn: string | undefined;
}
export interface StopStreamResponse {}
export declare class StreamUnavailable extends __BaseException {
  readonly name: "StreamUnavailable";
  readonly $fault: "server";
  exceptionMessage?: string | undefined;
  constructor(opts: __ExceptionOptionType<StreamUnavailable, __BaseException>);
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateChannelRequest {
  arn: string | undefined;
  name?: string | undefined;
  latencyMode?: ChannelLatencyMode | undefined;
  type?: ChannelType | undefined;
  authorized?: boolean | undefined;
  recordingConfigurationArn?: string | undefined;
  insecureIngest?: boolean | undefined;
  preset?: TranscodePreset | undefined;
  playbackRestrictionPolicyArn?: string | undefined;
  multitrackInputConfiguration?: MultitrackInputConfiguration | undefined;
  containerFormat?: ContainerFormat | undefined;
}
export interface UpdateChannelResponse {
  channel?: Channel | undefined;
}
export interface UpdatePlaybackRestrictionPolicyRequest {
  arn: string | undefined;
  allowedCountries?: string[] | undefined;
  allowedOrigins?: string[] | undefined;
  enableStrictOriginEnforcement?: boolean | undefined;
  name?: string | undefined;
}
export interface UpdatePlaybackRestrictionPolicyResponse {
  playbackRestrictionPolicy?: PlaybackRestrictionPolicy | undefined;
}
export declare const SrtFilterSensitiveLog: (obj: Srt) => any;
export declare const ChannelFilterSensitiveLog: (obj: Channel) => any;
export declare const BatchGetChannelResponseFilterSensitiveLog: (
  obj: BatchGetChannelResponse
) => any;
export declare const StreamKeyFilterSensitiveLog: (obj: StreamKey) => any;
export declare const BatchGetStreamKeyResponseFilterSensitiveLog: (
  obj: BatchGetStreamKeyResponse
) => any;
export declare const CreateChannelResponseFilterSensitiveLog: (
  obj: CreateChannelResponse
) => any;
export declare const CreateStreamKeyResponseFilterSensitiveLog: (
  obj: CreateStreamKeyResponse
) => any;
export declare const GetChannelResponseFilterSensitiveLog: (
  obj: GetChannelResponse
) => any;
export declare const GetStreamKeyResponseFilterSensitiveLog: (
  obj: GetStreamKeyResponse
) => any;
export declare const StreamSessionFilterSensitiveLog: (
  obj: StreamSession
) => any;
export declare const GetStreamSessionResponseFilterSensitiveLog: (
  obj: GetStreamSessionResponse
) => any;
export declare const PutMetadataRequestFilterSensitiveLog: (
  obj: PutMetadataRequest
) => any;
export declare const UpdateChannelResponseFilterSensitiveLog: (
  obj: UpdateChannelResponse
) => any;
