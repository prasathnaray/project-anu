"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  AccessDeniedException: () => AccessDeniedException,
  BatchGetChannelCommand: () => BatchGetChannelCommand,
  BatchGetChannelResponseFilterSensitiveLog: () => BatchGetChannelResponseFilterSensitiveLog,
  BatchGetStreamKeyCommand: () => BatchGetStreamKeyCommand,
  BatchGetStreamKeyResponseFilterSensitiveLog: () => BatchGetStreamKeyResponseFilterSensitiveLog,
  BatchStartViewerSessionRevocationCommand: () => BatchStartViewerSessionRevocationCommand,
  ChannelFilterSensitiveLog: () => ChannelFilterSensitiveLog,
  ChannelLatencyMode: () => ChannelLatencyMode,
  ChannelNotBroadcasting: () => ChannelNotBroadcasting,
  ChannelType: () => ChannelType,
  ConflictException: () => ConflictException,
  ContainerFormat: () => ContainerFormat,
  CreateChannelCommand: () => CreateChannelCommand,
  CreateChannelResponseFilterSensitiveLog: () => CreateChannelResponseFilterSensitiveLog,
  CreatePlaybackRestrictionPolicyCommand: () => CreatePlaybackRestrictionPolicyCommand,
  CreateRecordingConfigurationCommand: () => CreateRecordingConfigurationCommand,
  CreateStreamKeyCommand: () => CreateStreamKeyCommand,
  CreateStreamKeyResponseFilterSensitiveLog: () => CreateStreamKeyResponseFilterSensitiveLog,
  DeleteChannelCommand: () => DeleteChannelCommand,
  DeletePlaybackKeyPairCommand: () => DeletePlaybackKeyPairCommand,
  DeletePlaybackRestrictionPolicyCommand: () => DeletePlaybackRestrictionPolicyCommand,
  DeleteRecordingConfigurationCommand: () => DeleteRecordingConfigurationCommand,
  DeleteStreamKeyCommand: () => DeleteStreamKeyCommand,
  GetChannelCommand: () => GetChannelCommand,
  GetChannelResponseFilterSensitiveLog: () => GetChannelResponseFilterSensitiveLog,
  GetPlaybackKeyPairCommand: () => GetPlaybackKeyPairCommand,
  GetPlaybackRestrictionPolicyCommand: () => GetPlaybackRestrictionPolicyCommand,
  GetRecordingConfigurationCommand: () => GetRecordingConfigurationCommand,
  GetStreamCommand: () => GetStreamCommand,
  GetStreamKeyCommand: () => GetStreamKeyCommand,
  GetStreamKeyResponseFilterSensitiveLog: () => GetStreamKeyResponseFilterSensitiveLog,
  GetStreamSessionCommand: () => GetStreamSessionCommand,
  GetStreamSessionResponseFilterSensitiveLog: () => GetStreamSessionResponseFilterSensitiveLog,
  ImportPlaybackKeyPairCommand: () => ImportPlaybackKeyPairCommand,
  InternalServerException: () => InternalServerException,
  Ivs: () => Ivs,
  IvsClient: () => IvsClient,
  IvsServiceException: () => IvsServiceException,
  ListChannelsCommand: () => ListChannelsCommand,
  ListPlaybackKeyPairsCommand: () => ListPlaybackKeyPairsCommand,
  ListPlaybackRestrictionPoliciesCommand: () => ListPlaybackRestrictionPoliciesCommand,
  ListRecordingConfigurationsCommand: () => ListRecordingConfigurationsCommand,
  ListStreamKeysCommand: () => ListStreamKeysCommand,
  ListStreamSessionsCommand: () => ListStreamSessionsCommand,
  ListStreamsCommand: () => ListStreamsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  MultitrackMaximumResolution: () => MultitrackMaximumResolution,
  MultitrackPolicy: () => MultitrackPolicy,
  PendingVerification: () => PendingVerification,
  PutMetadataCommand: () => PutMetadataCommand,
  PutMetadataRequestFilterSensitiveLog: () => PutMetadataRequestFilterSensitiveLog,
  RecordingConfigurationState: () => RecordingConfigurationState,
  RecordingMode: () => RecordingMode,
  RenditionConfigurationRendition: () => RenditionConfigurationRendition,
  RenditionConfigurationRenditionSelection: () => RenditionConfigurationRenditionSelection,
  ResourceNotFoundException: () => ResourceNotFoundException,
  ServiceQuotaExceededException: () => ServiceQuotaExceededException,
  SrtFilterSensitiveLog: () => SrtFilterSensitiveLog,
  StartViewerSessionRevocationCommand: () => StartViewerSessionRevocationCommand,
  StopStreamCommand: () => StopStreamCommand,
  StreamHealth: () => StreamHealth,
  StreamKeyFilterSensitiveLog: () => StreamKeyFilterSensitiveLog,
  StreamSessionFilterSensitiveLog: () => StreamSessionFilterSensitiveLog,
  StreamState: () => StreamState,
  StreamUnavailable: () => StreamUnavailable,
  TagResourceCommand: () => TagResourceCommand,
  ThrottlingException: () => ThrottlingException,
  ThumbnailConfigurationResolution: () => ThumbnailConfigurationResolution,
  ThumbnailConfigurationStorage: () => ThumbnailConfigurationStorage,
  TranscodePreset: () => TranscodePreset,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateChannelCommand: () => UpdateChannelCommand,
  UpdateChannelResponseFilterSensitiveLog: () => UpdateChannelResponseFilterSensitiveLog,
  UpdatePlaybackRestrictionPolicyCommand: () => UpdatePlaybackRestrictionPolicyCommand,
  ValidationException: () => ValidationException,
  __Client: () => import_smithy_client.Client,
  paginateListChannels: () => paginateListChannels,
  paginateListPlaybackKeyPairs: () => paginateListPlaybackKeyPairs,
  paginateListPlaybackRestrictionPolicies: () => paginateListPlaybackRestrictionPolicies,
  paginateListRecordingConfigurations: () => paginateListRecordingConfigurations,
  paginateListStreamKeys: () => paginateListStreamKeys,
  paginateListStreamSessions: () => paginateListStreamSessions,
  paginateListStreams: () => paginateListStreams
});
module.exports = __toCommonJS(index_exports);

// src/IvsClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "ivs"
  });
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/IvsClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(
    (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
    (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
    (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
    getHttpAuthExtensionConfiguration(runtimeConfig)
  );
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(
    runtimeConfig,
    (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    resolveHttpAuthRuntimeConfig(extensionConfiguration)
  );
}, "resolveRuntimeExtensions");

// src/IvsClient.ts
var IvsClient = class extends import_smithy_client.Client {
  static {
    __name(this, "IvsClient");
  }
  /**
   * The resolved configuration of IvsClient class. This is resolved and normalized from the {@link IvsClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultIvsHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/Ivs.ts


// src/commands/BatchGetChannelCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/models/models_0.ts


// src/models/IvsServiceException.ts

var IvsServiceException = class _IvsServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "IvsServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _IvsServiceException.prototype);
  }
};

// src/models/models_0.ts
var AccessDeniedException = class _AccessDeniedException extends IvsServiceException {
  static {
    __name(this, "AccessDeniedException");
  }
  name = "AccessDeniedException";
  $fault = "client";
  /**
   * <p>User does not have sufficient access to perform this action.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var ContainerFormat = {
  FragmentedMP4: "FRAGMENTED_MP4",
  TS: "TS"
};
var ChannelLatencyMode = {
  LowLatency: "LOW",
  NormalLatency: "NORMAL"
};
var MultitrackMaximumResolution = {
  FULL_HD: "FULL_HD",
  HD: "HD",
  SD: "SD"
};
var MultitrackPolicy = {
  ALLOW: "ALLOW",
  REQUIRE: "REQUIRE"
};
var TranscodePreset = {
  ConstrainedBandwidthTranscodePreset: "CONSTRAINED_BANDWIDTH_DELIVERY",
  HigherBandwidthTranscodePreset: "HIGHER_BANDWIDTH_DELIVERY"
};
var ChannelType = {
  AdvancedHDChannelType: "ADVANCED_HD",
  AdvancedSDChannelType: "ADVANCED_SD",
  BasicChannelType: "BASIC",
  StandardChannelType: "STANDARD"
};
var PendingVerification = class _PendingVerification extends IvsServiceException {
  static {
    __name(this, "PendingVerification");
  }
  name = "PendingVerification";
  $fault = "client";
  /**
   * <p> Your account is pending verification. </p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "PendingVerification",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _PendingVerification.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var ThrottlingException = class _ThrottlingException extends IvsServiceException {
  static {
    __name(this, "ThrottlingException");
  }
  name = "ThrottlingException";
  $fault = "client";
  /**
   * <p>Request was denied due to request throttling.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var ValidationException = class _ValidationException extends IvsServiceException {
  static {
    __name(this, "ValidationException");
  }
  name = "ValidationException";
  $fault = "client";
  /**
   * <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ValidationException.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var ResourceNotFoundException = class _ResourceNotFoundException extends IvsServiceException {
  static {
    __name(this, "ResourceNotFoundException");
  }
  name = "ResourceNotFoundException";
  $fault = "client";
  /**
   * <p>Request references a resource which does not exist.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var ServiceQuotaExceededException = class _ServiceQuotaExceededException extends IvsServiceException {
  static {
    __name(this, "ServiceQuotaExceededException");
  }
  name = "ServiceQuotaExceededException";
  $fault = "client";
  /**
   * <p>Request would cause a service quota to be exceeded.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var ConflictException = class _ConflictException extends IvsServiceException {
  static {
    __name(this, "ConflictException");
  }
  name = "ConflictException";
  $fault = "client";
  /**
   * <p>Updating or deleting a resource can cause an inconsistent state.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var RenditionConfigurationRendition = {
  FULL_HD: "FULL_HD",
  HD: "HD",
  LOWEST_RESOLUTION: "LOWEST_RESOLUTION",
  SD: "SD"
};
var RenditionConfigurationRenditionSelection = {
  ALL: "ALL",
  CUSTOM: "CUSTOM",
  NONE: "NONE"
};
var RecordingMode = {
  Disabled: "DISABLED",
  Interval: "INTERVAL"
};
var ThumbnailConfigurationResolution = {
  FULL_HD: "FULL_HD",
  HD: "HD",
  LOWEST_RESOLUTION: "LOWEST_RESOLUTION",
  SD: "SD"
};
var ThumbnailConfigurationStorage = {
  LATEST: "LATEST",
  SEQUENTIAL: "SEQUENTIAL"
};
var RecordingConfigurationState = {
  Active: "ACTIVE",
  CreateFailed: "CREATE_FAILED",
  Creating: "CREATING"
};
var InternalServerException = class _InternalServerException extends IvsServiceException {
  static {
    __name(this, "InternalServerException");
  }
  name = "InternalServerException";
  $fault = "server";
  /**
   * <p>Unexpected error during processing of request.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalServerException.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var ChannelNotBroadcasting = class _ChannelNotBroadcasting extends IvsServiceException {
  static {
    __name(this, "ChannelNotBroadcasting");
  }
  name = "ChannelNotBroadcasting";
  $fault = "client";
  /**
   * <p>The stream is offline for the given channel ARN.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ChannelNotBroadcasting",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ChannelNotBroadcasting.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var StreamHealth = {
  Starving: "STARVING",
  StreamHealthy: "HEALTHY",
  Unknown: "UNKNOWN"
};
var StreamState = {
  StreamLive: "LIVE",
  StreamOffline: "OFFLINE"
};
var StreamUnavailable = class _StreamUnavailable extends IvsServiceException {
  static {
    __name(this, "StreamUnavailable");
  }
  name = "StreamUnavailable";
  $fault = "server";
  /**
   * <p>The stream is temporarily unavailable.</p>
   * @public
   */
  exceptionMessage;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "StreamUnavailable",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _StreamUnavailable.prototype);
    this.exceptionMessage = opts.exceptionMessage;
  }
};
var SrtFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.passphrase && { passphrase: import_smithy_client.SENSITIVE_STRING }
}), "SrtFilterSensitiveLog");
var ChannelFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.srt && { srt: SrtFilterSensitiveLog(obj.srt) }
}), "ChannelFilterSensitiveLog");
var BatchGetChannelResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.channels && { channels: obj.channels.map((item) => ChannelFilterSensitiveLog(item)) }
}), "BatchGetChannelResponseFilterSensitiveLog");
var StreamKeyFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.value && { value: import_smithy_client.SENSITIVE_STRING }
}), "StreamKeyFilterSensitiveLog");
var BatchGetStreamKeyResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.streamKeys && { streamKeys: obj.streamKeys.map((item) => StreamKeyFilterSensitiveLog(item)) }
}), "BatchGetStreamKeyResponseFilterSensitiveLog");
var CreateChannelResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.channel && { channel: ChannelFilterSensitiveLog(obj.channel) },
  ...obj.streamKey && { streamKey: StreamKeyFilterSensitiveLog(obj.streamKey) }
}), "CreateChannelResponseFilterSensitiveLog");
var CreateStreamKeyResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.streamKey && { streamKey: StreamKeyFilterSensitiveLog(obj.streamKey) }
}), "CreateStreamKeyResponseFilterSensitiveLog");
var GetChannelResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.channel && { channel: ChannelFilterSensitiveLog(obj.channel) }
}), "GetChannelResponseFilterSensitiveLog");
var GetStreamKeyResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.streamKey && { streamKey: StreamKeyFilterSensitiveLog(obj.streamKey) }
}), "GetStreamKeyResponseFilterSensitiveLog");
var StreamSessionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.channel && { channel: ChannelFilterSensitiveLog(obj.channel) }
}), "StreamSessionFilterSensitiveLog");
var GetStreamSessionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.streamSession && { streamSession: StreamSessionFilterSensitiveLog(obj.streamSession) }
}), "GetStreamSessionResponseFilterSensitiveLog");
var PutMetadataRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.metadata && { metadata: import_smithy_client.SENSITIVE_STRING }
}), "PutMetadataRequestFilterSensitiveLog");
var UpdateChannelResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.channel && { channel: ChannelFilterSensitiveLog(obj.channel) }
}), "UpdateChannelResponseFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");


var se_BatchGetChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/BatchGetChannel");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arns: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "arns")
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchGetChannelCommand");
var se_BatchGetStreamKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/BatchGetStreamKey");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arns: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "arns")
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchGetStreamKeyCommand");
var se_BatchStartViewerSessionRevocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/BatchStartViewerSessionRevocation");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      viewerSessions: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "viewerSessions")
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchStartViewerSessionRevocationCommand");
var se_CreateChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/CreateChannel");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      authorized: [],
      containerFormat: [],
      insecureIngest: [],
      latencyMode: [],
      multitrackInputConfiguration: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "multitrackInputConfiguration"),
      name: [],
      playbackRestrictionPolicyArn: [],
      preset: [],
      recordingConfigurationArn: [],
      tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "tags"),
      type: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateChannelCommand");
var se_CreatePlaybackRestrictionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/CreatePlaybackRestrictionPolicy");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      allowedCountries: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "allowedCountries"),
      allowedOrigins: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "allowedOrigins"),
      enableStrictOriginEnforcement: [],
      name: [],
      tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "tags")
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreatePlaybackRestrictionPolicyCommand");
var se_CreateRecordingConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/CreateRecordingConfiguration");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      destinationConfiguration: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "destinationConfiguration"),
      name: [],
      recordingReconnectWindowSeconds: [],
      renditionConfiguration: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "renditionConfiguration"),
      tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "tags"),
      thumbnailConfiguration: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "thumbnailConfiguration")
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateRecordingConfigurationCommand");
var se_CreateStreamKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/CreateStreamKey");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelArn: [],
      tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "tags")
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateStreamKeyCommand");
var se_DeleteChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/DeleteChannel");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DeleteChannelCommand");
var se_DeletePlaybackKeyPairCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/DeletePlaybackKeyPair");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DeletePlaybackKeyPairCommand");
var se_DeletePlaybackRestrictionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/DeletePlaybackRestrictionPolicy");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DeletePlaybackRestrictionPolicyCommand");
var se_DeleteRecordingConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/DeleteRecordingConfiguration");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DeleteRecordingConfigurationCommand");
var se_DeleteStreamKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/DeleteStreamKey");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DeleteStreamKeyCommand");
var se_GetChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetChannel");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetChannelCommand");
var se_GetPlaybackKeyPairCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetPlaybackKeyPair");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetPlaybackKeyPairCommand");
var se_GetPlaybackRestrictionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetPlaybackRestrictionPolicy");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetPlaybackRestrictionPolicyCommand");
var se_GetRecordingConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetRecordingConfiguration");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetRecordingConfigurationCommand");
var se_GetStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetStream");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetStreamCommand");
var se_GetStreamKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetStreamKey");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetStreamKeyCommand");
var se_GetStreamSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetStreamSession");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelArn: [],
      streamId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetStreamSessionCommand");
var se_ImportPlaybackKeyPairCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ImportPlaybackKeyPair");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      name: [],
      publicKeyMaterial: [],
      tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "tags")
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ImportPlaybackKeyPairCommand");
var se_ListChannelsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ListChannels");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filterByName: [],
      filterByPlaybackRestrictionPolicyArn: [],
      filterByRecordingConfigurationArn: [],
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListChannelsCommand");
var se_ListPlaybackKeyPairsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ListPlaybackKeyPairs");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListPlaybackKeyPairsCommand");
var se_ListPlaybackRestrictionPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ListPlaybackRestrictionPolicies");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListPlaybackRestrictionPoliciesCommand");
var se_ListRecordingConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ListRecordingConfigurations");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListRecordingConfigurationsCommand");
var se_ListStreamKeysCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ListStreamKeys");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelArn: [],
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListStreamKeysCommand");
var se_ListStreamsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ListStreams");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filterBy: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "filterBy"),
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListStreamsCommand");
var se_ListStreamSessionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ListStreamSessions");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelArn: [],
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListStreamSessionsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_PutMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/PutMetadata");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelArn: [],
      metadata: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PutMetadataCommand");
var se_StartViewerSessionRevocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/StartViewerSessionRevocation");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelArn: [],
      viewerId: [],
      viewerSessionVersionsLessThanOrEqualTo: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartViewerSessionRevocationCommand");
var se_StopStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/StopStream");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StopStreamCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "tags")
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [(0, import_smithy_client.expectNonNull)(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/UpdateChannel");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: [],
      authorized: [],
      containerFormat: [],
      insecureIngest: [],
      latencyMode: [],
      multitrackInputConfiguration: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "multitrackInputConfiguration"),
      name: [],
      playbackRestrictionPolicyArn: [],
      preset: [],
      recordingConfigurationArn: [],
      type: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_UpdateChannelCommand");
var se_UpdatePlaybackRestrictionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/UpdatePlaybackRestrictionPolicy");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      allowedCountries: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "allowedCountries"),
      allowedOrigins: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "allowedOrigins"),
      arn: [],
      enableStrictOriginEnforcement: [],
      name: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_UpdatePlaybackRestrictionPolicyCommand");
var de_BatchGetChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    channels: import_smithy_client._json,
    errors: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchGetChannelCommand");
var de_BatchGetStreamKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errors: import_smithy_client._json,
    streamKeys: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchGetStreamKeyCommand");
var de_BatchStartViewerSessionRevocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errors: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchStartViewerSessionRevocationCommand");
var de_CreateChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    channel: import_smithy_client._json,
    streamKey: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateChannelCommand");
var de_CreatePlaybackRestrictionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    playbackRestrictionPolicy: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePlaybackRestrictionPolicyCommand");
var de_CreateRecordingConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    recordingConfiguration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateRecordingConfigurationCommand");
var de_CreateStreamKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    streamKey: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateStreamKeyCommand");
var de_DeleteChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteChannelCommand");
var de_DeletePlaybackKeyPairCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePlaybackKeyPairCommand");
var de_DeletePlaybackRestrictionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePlaybackRestrictionPolicyCommand");
var de_DeleteRecordingConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteRecordingConfigurationCommand");
var de_DeleteStreamKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteStreamKeyCommand");
var de_GetChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    channel: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetChannelCommand");
var de_GetPlaybackKeyPairCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    keyPair: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPlaybackKeyPairCommand");
var de_GetPlaybackRestrictionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    playbackRestrictionPolicy: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPlaybackRestrictionPolicyCommand");
var de_GetRecordingConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    recordingConfiguration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetRecordingConfigurationCommand");
var de_GetStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    stream: /* @__PURE__ */ __name((_) => de__Stream(_, context), "stream")
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetStreamCommand");
var de_GetStreamKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    streamKey: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetStreamKeyCommand");
var de_GetStreamSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    streamSession: /* @__PURE__ */ __name((_) => de_StreamSession(_, context), "streamSession")
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetStreamSessionCommand");
var de_ImportPlaybackKeyPairCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    keyPair: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ImportPlaybackKeyPairCommand");
var de_ListChannelsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    channels: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListChannelsCommand");
var de_ListPlaybackKeyPairsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    keyPairs: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPlaybackKeyPairsCommand");
var de_ListPlaybackRestrictionPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    playbackRestrictionPolicies: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPlaybackRestrictionPoliciesCommand");
var de_ListRecordingConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    recordingConfigurations: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListRecordingConfigurationsCommand");
var de_ListStreamKeysCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    streamKeys: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListStreamKeysCommand");
var de_ListStreamsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    streams: /* @__PURE__ */ __name((_) => de_StreamList(_, context), "streams")
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListStreamsCommand");
var de_ListStreamSessionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    streamSessions: /* @__PURE__ */ __name((_) => de_StreamSessionList(_, context), "streamSessions")
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListStreamSessionsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_PutMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutMetadataCommand");
var de_StartViewerSessionRevocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_StartViewerSessionRevocationCommand");
var de_StopStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_StopStreamCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    channel: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateChannelCommand");
var de_UpdatePlaybackRestrictionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    playbackRestrictionPolicy: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdatePlaybackRestrictionPolicyCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.ivs#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "PendingVerification":
    case "com.amazonaws.ivs#PendingVerification":
      throw await de_PendingVerificationRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.ivs#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.ivs#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.ivs#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.ivs#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.ivs#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.ivs#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ChannelNotBroadcasting":
    case "com.amazonaws.ivs#ChannelNotBroadcasting":
      throw await de_ChannelNotBroadcastingRes(parsedOutput, context);
    case "StreamUnavailable":
    case "com.amazonaws.ivs#StreamUnavailable":
      throw await de_StreamUnavailableRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(IvsServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_ChannelNotBroadcastingRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ChannelNotBroadcasting({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ChannelNotBroadcastingRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_PendingVerificationRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new PendingVerification({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_PendingVerificationRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceQuotaExceededExceptionRes");
var de_StreamUnavailableRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new StreamUnavailable({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_StreamUnavailableRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    exceptionMessage: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var de__Stream = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    channelArn: import_smithy_client.expectString,
    health: import_smithy_client.expectString,
    playbackUrl: import_smithy_client.expectString,
    startTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), "startTime"),
    state: import_smithy_client.expectString,
    streamId: import_smithy_client.expectString,
    viewerCount: import_smithy_client.expectLong
  });
}, "de__Stream");
var de_StreamEvent = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    code: import_smithy_client.expectString,
    eventTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), "eventTime"),
    name: import_smithy_client.expectString,
    type: import_smithy_client.expectString
  });
}, "de_StreamEvent");
var de_StreamEvents = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_StreamEvent(entry, context);
  });
  return retVal;
}, "de_StreamEvents");
var de_StreamList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_StreamSummary(entry, context);
  });
  return retVal;
}, "de_StreamList");
var de_StreamSession = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    channel: import_smithy_client._json,
    endTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), "endTime"),
    ingestConfiguration: import_smithy_client._json,
    ingestConfigurations: import_smithy_client._json,
    recordingConfiguration: import_smithy_client._json,
    startTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), "startTime"),
    streamId: import_smithy_client.expectString,
    truncatedEvents: /* @__PURE__ */ __name((_) => de_StreamEvents(_, context), "truncatedEvents")
  });
}, "de_StreamSession");
var de_StreamSessionList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_StreamSessionSummary(entry, context);
  });
  return retVal;
}, "de_StreamSessionList");
var de_StreamSessionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    endTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), "endTime"),
    hasErrorEvent: import_smithy_client.expectBoolean,
    startTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), "startTime"),
    streamId: import_smithy_client.expectString
  });
}, "de_StreamSessionSummary");
var de_StreamSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    channelArn: import_smithy_client.expectString,
    health: import_smithy_client.expectString,
    startTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), "startTime"),
    state: import_smithy_client.expectString,
    streamId: import_smithy_client.expectString,
    viewerCount: import_smithy_client.expectLong
  });
}, "de_StreamSummary");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _tK = "tagKeys";

// src/commands/BatchGetChannelCommand.ts
var BatchGetChannelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "BatchGetChannel", {}).n("IvsClient", "BatchGetChannelCommand").f(void 0, BatchGetChannelResponseFilterSensitiveLog).ser(se_BatchGetChannelCommand).de(de_BatchGetChannelCommand).build() {
  static {
    __name(this, "BatchGetChannelCommand");
  }
};

// src/commands/BatchGetStreamKeyCommand.ts



var BatchGetStreamKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "BatchGetStreamKey", {}).n("IvsClient", "BatchGetStreamKeyCommand").f(void 0, BatchGetStreamKeyResponseFilterSensitiveLog).ser(se_BatchGetStreamKeyCommand).de(de_BatchGetStreamKeyCommand).build() {
  static {
    __name(this, "BatchGetStreamKeyCommand");
  }
};

// src/commands/BatchStartViewerSessionRevocationCommand.ts



var BatchStartViewerSessionRevocationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "BatchStartViewerSessionRevocation", {}).n("IvsClient", "BatchStartViewerSessionRevocationCommand").f(void 0, void 0).ser(se_BatchStartViewerSessionRevocationCommand).de(de_BatchStartViewerSessionRevocationCommand).build() {
  static {
    __name(this, "BatchStartViewerSessionRevocationCommand");
  }
};

// src/commands/CreateChannelCommand.ts



var CreateChannelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "CreateChannel", {}).n("IvsClient", "CreateChannelCommand").f(void 0, CreateChannelResponseFilterSensitiveLog).ser(se_CreateChannelCommand).de(de_CreateChannelCommand).build() {
  static {
    __name(this, "CreateChannelCommand");
  }
};

// src/commands/CreatePlaybackRestrictionPolicyCommand.ts



var CreatePlaybackRestrictionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "CreatePlaybackRestrictionPolicy", {}).n("IvsClient", "CreatePlaybackRestrictionPolicyCommand").f(void 0, void 0).ser(se_CreatePlaybackRestrictionPolicyCommand).de(de_CreatePlaybackRestrictionPolicyCommand).build() {
  static {
    __name(this, "CreatePlaybackRestrictionPolicyCommand");
  }
};

// src/commands/CreateRecordingConfigurationCommand.ts



var CreateRecordingConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "CreateRecordingConfiguration", {}).n("IvsClient", "CreateRecordingConfigurationCommand").f(void 0, void 0).ser(se_CreateRecordingConfigurationCommand).de(de_CreateRecordingConfigurationCommand).build() {
  static {
    __name(this, "CreateRecordingConfigurationCommand");
  }
};

// src/commands/CreateStreamKeyCommand.ts



var CreateStreamKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "CreateStreamKey", {}).n("IvsClient", "CreateStreamKeyCommand").f(void 0, CreateStreamKeyResponseFilterSensitiveLog).ser(se_CreateStreamKeyCommand).de(de_CreateStreamKeyCommand).build() {
  static {
    __name(this, "CreateStreamKeyCommand");
  }
};

// src/commands/DeleteChannelCommand.ts



var DeleteChannelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "DeleteChannel", {}).n("IvsClient", "DeleteChannelCommand").f(void 0, void 0).ser(se_DeleteChannelCommand).de(de_DeleteChannelCommand).build() {
  static {
    __name(this, "DeleteChannelCommand");
  }
};

// src/commands/DeletePlaybackKeyPairCommand.ts



var DeletePlaybackKeyPairCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "DeletePlaybackKeyPair", {}).n("IvsClient", "DeletePlaybackKeyPairCommand").f(void 0, void 0).ser(se_DeletePlaybackKeyPairCommand).de(de_DeletePlaybackKeyPairCommand).build() {
  static {
    __name(this, "DeletePlaybackKeyPairCommand");
  }
};

// src/commands/DeletePlaybackRestrictionPolicyCommand.ts



var DeletePlaybackRestrictionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "DeletePlaybackRestrictionPolicy", {}).n("IvsClient", "DeletePlaybackRestrictionPolicyCommand").f(void 0, void 0).ser(se_DeletePlaybackRestrictionPolicyCommand).de(de_DeletePlaybackRestrictionPolicyCommand).build() {
  static {
    __name(this, "DeletePlaybackRestrictionPolicyCommand");
  }
};

// src/commands/DeleteRecordingConfigurationCommand.ts



var DeleteRecordingConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "DeleteRecordingConfiguration", {}).n("IvsClient", "DeleteRecordingConfigurationCommand").f(void 0, void 0).ser(se_DeleteRecordingConfigurationCommand).de(de_DeleteRecordingConfigurationCommand).build() {
  static {
    __name(this, "DeleteRecordingConfigurationCommand");
  }
};

// src/commands/DeleteStreamKeyCommand.ts



var DeleteStreamKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "DeleteStreamKey", {}).n("IvsClient", "DeleteStreamKeyCommand").f(void 0, void 0).ser(se_DeleteStreamKeyCommand).de(de_DeleteStreamKeyCommand).build() {
  static {
    __name(this, "DeleteStreamKeyCommand");
  }
};

// src/commands/GetChannelCommand.ts



var GetChannelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "GetChannel", {}).n("IvsClient", "GetChannelCommand").f(void 0, GetChannelResponseFilterSensitiveLog).ser(se_GetChannelCommand).de(de_GetChannelCommand).build() {
  static {
    __name(this, "GetChannelCommand");
  }
};

// src/commands/GetPlaybackKeyPairCommand.ts



var GetPlaybackKeyPairCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "GetPlaybackKeyPair", {}).n("IvsClient", "GetPlaybackKeyPairCommand").f(void 0, void 0).ser(se_GetPlaybackKeyPairCommand).de(de_GetPlaybackKeyPairCommand).build() {
  static {
    __name(this, "GetPlaybackKeyPairCommand");
  }
};

// src/commands/GetPlaybackRestrictionPolicyCommand.ts



var GetPlaybackRestrictionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "GetPlaybackRestrictionPolicy", {}).n("IvsClient", "GetPlaybackRestrictionPolicyCommand").f(void 0, void 0).ser(se_GetPlaybackRestrictionPolicyCommand).de(de_GetPlaybackRestrictionPolicyCommand).build() {
  static {
    __name(this, "GetPlaybackRestrictionPolicyCommand");
  }
};

// src/commands/GetRecordingConfigurationCommand.ts



var GetRecordingConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "GetRecordingConfiguration", {}).n("IvsClient", "GetRecordingConfigurationCommand").f(void 0, void 0).ser(se_GetRecordingConfigurationCommand).de(de_GetRecordingConfigurationCommand).build() {
  static {
    __name(this, "GetRecordingConfigurationCommand");
  }
};

// src/commands/GetStreamCommand.ts



var GetStreamCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "GetStream", {}).n("IvsClient", "GetStreamCommand").f(void 0, void 0).ser(se_GetStreamCommand).de(de_GetStreamCommand).build() {
  static {
    __name(this, "GetStreamCommand");
  }
};

// src/commands/GetStreamKeyCommand.ts



var GetStreamKeyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "GetStreamKey", {}).n("IvsClient", "GetStreamKeyCommand").f(void 0, GetStreamKeyResponseFilterSensitiveLog).ser(se_GetStreamKeyCommand).de(de_GetStreamKeyCommand).build() {
  static {
    __name(this, "GetStreamKeyCommand");
  }
};

// src/commands/GetStreamSessionCommand.ts



var GetStreamSessionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "GetStreamSession", {}).n("IvsClient", "GetStreamSessionCommand").f(void 0, GetStreamSessionResponseFilterSensitiveLog).ser(se_GetStreamSessionCommand).de(de_GetStreamSessionCommand).build() {
  static {
    __name(this, "GetStreamSessionCommand");
  }
};

// src/commands/ImportPlaybackKeyPairCommand.ts



var ImportPlaybackKeyPairCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ImportPlaybackKeyPair", {}).n("IvsClient", "ImportPlaybackKeyPairCommand").f(void 0, void 0).ser(se_ImportPlaybackKeyPairCommand).de(de_ImportPlaybackKeyPairCommand).build() {
  static {
    __name(this, "ImportPlaybackKeyPairCommand");
  }
};

// src/commands/ListChannelsCommand.ts



var ListChannelsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ListChannels", {}).n("IvsClient", "ListChannelsCommand").f(void 0, void 0).ser(se_ListChannelsCommand).de(de_ListChannelsCommand).build() {
  static {
    __name(this, "ListChannelsCommand");
  }
};

// src/commands/ListPlaybackKeyPairsCommand.ts



var ListPlaybackKeyPairsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ListPlaybackKeyPairs", {}).n("IvsClient", "ListPlaybackKeyPairsCommand").f(void 0, void 0).ser(se_ListPlaybackKeyPairsCommand).de(de_ListPlaybackKeyPairsCommand).build() {
  static {
    __name(this, "ListPlaybackKeyPairsCommand");
  }
};

// src/commands/ListPlaybackRestrictionPoliciesCommand.ts



var ListPlaybackRestrictionPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ListPlaybackRestrictionPolicies", {}).n("IvsClient", "ListPlaybackRestrictionPoliciesCommand").f(void 0, void 0).ser(se_ListPlaybackRestrictionPoliciesCommand).de(de_ListPlaybackRestrictionPoliciesCommand).build() {
  static {
    __name(this, "ListPlaybackRestrictionPoliciesCommand");
  }
};

// src/commands/ListRecordingConfigurationsCommand.ts



var ListRecordingConfigurationsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ListRecordingConfigurations", {}).n("IvsClient", "ListRecordingConfigurationsCommand").f(void 0, void 0).ser(se_ListRecordingConfigurationsCommand).de(de_ListRecordingConfigurationsCommand).build() {
  static {
    __name(this, "ListRecordingConfigurationsCommand");
  }
};

// src/commands/ListStreamKeysCommand.ts



var ListStreamKeysCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ListStreamKeys", {}).n("IvsClient", "ListStreamKeysCommand").f(void 0, void 0).ser(se_ListStreamKeysCommand).de(de_ListStreamKeysCommand).build() {
  static {
    __name(this, "ListStreamKeysCommand");
  }
};

// src/commands/ListStreamsCommand.ts



var ListStreamsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ListStreams", {}).n("IvsClient", "ListStreamsCommand").f(void 0, void 0).ser(se_ListStreamsCommand).de(de_ListStreamsCommand).build() {
  static {
    __name(this, "ListStreamsCommand");
  }
};

// src/commands/ListStreamSessionsCommand.ts



var ListStreamSessionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ListStreamSessions", {}).n("IvsClient", "ListStreamSessionsCommand").f(void 0, void 0).ser(se_ListStreamSessionsCommand).de(de_ListStreamSessionsCommand).build() {
  static {
    __name(this, "ListStreamSessionsCommand");
  }
};

// src/commands/ListTagsForResourceCommand.ts



var ListTagsForResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "ListTagsForResource", {}).n("IvsClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
  static {
    __name(this, "ListTagsForResourceCommand");
  }
};

// src/commands/PutMetadataCommand.ts



var PutMetadataCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "PutMetadata", {}).n("IvsClient", "PutMetadataCommand").f(PutMetadataRequestFilterSensitiveLog, void 0).ser(se_PutMetadataCommand).de(de_PutMetadataCommand).build() {
  static {
    __name(this, "PutMetadataCommand");
  }
};

// src/commands/StartViewerSessionRevocationCommand.ts



var StartViewerSessionRevocationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "StartViewerSessionRevocation", {}).n("IvsClient", "StartViewerSessionRevocationCommand").f(void 0, void 0).ser(se_StartViewerSessionRevocationCommand).de(de_StartViewerSessionRevocationCommand).build() {
  static {
    __name(this, "StartViewerSessionRevocationCommand");
  }
};

// src/commands/StopStreamCommand.ts



var StopStreamCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "StopStream", {}).n("IvsClient", "StopStreamCommand").f(void 0, void 0).ser(se_StopStreamCommand).de(de_StopStreamCommand).build() {
  static {
    __name(this, "StopStreamCommand");
  }
};

// src/commands/TagResourceCommand.ts



var TagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "TagResource", {}).n("IvsClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
  static {
    __name(this, "TagResourceCommand");
  }
};

// src/commands/UntagResourceCommand.ts



var UntagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "UntagResource", {}).n("IvsClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
  static {
    __name(this, "UntagResourceCommand");
  }
};

// src/commands/UpdateChannelCommand.ts



var UpdateChannelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "UpdateChannel", {}).n("IvsClient", "UpdateChannelCommand").f(void 0, UpdateChannelResponseFilterSensitiveLog).ser(se_UpdateChannelCommand).de(de_UpdateChannelCommand).build() {
  static {
    __name(this, "UpdateChannelCommand");
  }
};

// src/commands/UpdatePlaybackRestrictionPolicyCommand.ts



var UpdatePlaybackRestrictionPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonInteractiveVideoService", "UpdatePlaybackRestrictionPolicy", {}).n("IvsClient", "UpdatePlaybackRestrictionPolicyCommand").f(void 0, void 0).ser(se_UpdatePlaybackRestrictionPolicyCommand).de(de_UpdatePlaybackRestrictionPolicyCommand).build() {
  static {
    __name(this, "UpdatePlaybackRestrictionPolicyCommand");
  }
};

// src/Ivs.ts
var commands = {
  BatchGetChannelCommand,
  BatchGetStreamKeyCommand,
  BatchStartViewerSessionRevocationCommand,
  CreateChannelCommand,
  CreatePlaybackRestrictionPolicyCommand,
  CreateRecordingConfigurationCommand,
  CreateStreamKeyCommand,
  DeleteChannelCommand,
  DeletePlaybackKeyPairCommand,
  DeletePlaybackRestrictionPolicyCommand,
  DeleteRecordingConfigurationCommand,
  DeleteStreamKeyCommand,
  GetChannelCommand,
  GetPlaybackKeyPairCommand,
  GetPlaybackRestrictionPolicyCommand,
  GetRecordingConfigurationCommand,
  GetStreamCommand,
  GetStreamKeyCommand,
  GetStreamSessionCommand,
  ImportPlaybackKeyPairCommand,
  ListChannelsCommand,
  ListPlaybackKeyPairsCommand,
  ListPlaybackRestrictionPoliciesCommand,
  ListRecordingConfigurationsCommand,
  ListStreamKeysCommand,
  ListStreamsCommand,
  ListStreamSessionsCommand,
  ListTagsForResourceCommand,
  PutMetadataCommand,
  StartViewerSessionRevocationCommand,
  StopStreamCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateChannelCommand,
  UpdatePlaybackRestrictionPolicyCommand
};
var Ivs = class extends IvsClient {
  static {
    __name(this, "Ivs");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, Ivs);

// src/pagination/ListChannelsPaginator.ts

var paginateListChannels = (0, import_core.createPaginator)(IvsClient, ListChannelsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListPlaybackKeyPairsPaginator.ts

var paginateListPlaybackKeyPairs = (0, import_core.createPaginator)(IvsClient, ListPlaybackKeyPairsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListPlaybackRestrictionPoliciesPaginator.ts

var paginateListPlaybackRestrictionPolicies = (0, import_core.createPaginator)(IvsClient, ListPlaybackRestrictionPoliciesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListRecordingConfigurationsPaginator.ts

var paginateListRecordingConfigurations = (0, import_core.createPaginator)(IvsClient, ListRecordingConfigurationsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListStreamKeysPaginator.ts

var paginateListStreamKeys = (0, import_core.createPaginator)(IvsClient, ListStreamKeysCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListStreamSessionsPaginator.ts

var paginateListStreamSessions = (0, import_core.createPaginator)(IvsClient, ListStreamSessionsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListStreamsPaginator.ts

var paginateListStreams = (0, import_core.createPaginator)(IvsClient, ListStreamsCommand, "nextToken", "nextToken", "maxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  IvsServiceException,
  __Client,
  IvsClient,
  Ivs,
  $Command,
  BatchGetChannelCommand,
  BatchGetStreamKeyCommand,
  BatchStartViewerSessionRevocationCommand,
  CreateChannelCommand,
  CreatePlaybackRestrictionPolicyCommand,
  CreateRecordingConfigurationCommand,
  CreateStreamKeyCommand,
  DeleteChannelCommand,
  DeletePlaybackKeyPairCommand,
  DeletePlaybackRestrictionPolicyCommand,
  DeleteRecordingConfigurationCommand,
  DeleteStreamKeyCommand,
  GetChannelCommand,
  GetPlaybackKeyPairCommand,
  GetPlaybackRestrictionPolicyCommand,
  GetRecordingConfigurationCommand,
  GetStreamCommand,
  GetStreamKeyCommand,
  GetStreamSessionCommand,
  ImportPlaybackKeyPairCommand,
  ListChannelsCommand,
  ListPlaybackKeyPairsCommand,
  ListPlaybackRestrictionPoliciesCommand,
  ListRecordingConfigurationsCommand,
  ListStreamKeysCommand,
  ListStreamSessionsCommand,
  ListStreamsCommand,
  ListTagsForResourceCommand,
  PutMetadataCommand,
  StartViewerSessionRevocationCommand,
  StopStreamCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateChannelCommand,
  UpdatePlaybackRestrictionPolicyCommand,
  paginateListChannels,
  paginateListPlaybackKeyPairs,
  paginateListPlaybackRestrictionPolicies,
  paginateListRecordingConfigurations,
  paginateListStreamKeys,
  paginateListStreamSessions,
  paginateListStreams,
  AccessDeniedException,
  ContainerFormat,
  ChannelLatencyMode,
  MultitrackMaximumResolution,
  MultitrackPolicy,
  TranscodePreset,
  ChannelType,
  PendingVerification,
  ThrottlingException,
  ValidationException,
  ResourceNotFoundException,
  ServiceQuotaExceededException,
  ConflictException,
  RenditionConfigurationRendition,
  RenditionConfigurationRenditionSelection,
  RecordingMode,
  ThumbnailConfigurationResolution,
  ThumbnailConfigurationStorage,
  RecordingConfigurationState,
  InternalServerException,
  ChannelNotBroadcasting,
  StreamHealth,
  StreamState,
  StreamUnavailable,
  SrtFilterSensitiveLog,
  ChannelFilterSensitiveLog,
  BatchGetChannelResponseFilterSensitiveLog,
  StreamKeyFilterSensitiveLog,
  BatchGetStreamKeyResponseFilterSensitiveLog,
  CreateChannelResponseFilterSensitiveLog,
  CreateStreamKeyResponseFilterSensitiveLog,
  GetChannelResponseFilterSensitiveLog,
  GetStreamKeyResponseFilterSensitiveLog,
  StreamSessionFilterSensitiveLog,
  GetStreamSessionResponseFilterSensitiveLog,
  PutMetadataRequestFilterSensitiveLog,
  UpdateChannelResponseFilterSensitiveLog
});

